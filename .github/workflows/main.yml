name: CI/CD Pipeline with Docker Compose

on:
  push:
    branches:
      - develop
    tags:
      - 'v*.*.*'

jobs:
  development:
    runs-on: ubuntu-latest
    environment: development
    if: github.ref == 'refs/heads/develop'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Install docker-compose
        run: |
          curl -L "https://github.com/docker/compose/releases/download/$(curl -s https://api.github.com/repos/docker/compose/releases/latest | jq -r .tag_name)/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          docker-compose --version  # Verifica la instalación

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Set up Google Cloud credentials
        run: echo "${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}" > /tmp/service-account.json
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}

      - name: Build and start Docker containers for development
        run: |
          docker-compose -f docker-compose.yml -p development up --build -d

      - name: Run Terraform apply for development
        run: |
          cd terraform
          terraform init
          terraform apply -auto-approve -var="project_id=${{ secrets.GCP_PROJECT_ID }}"

      - name: Run docker-compose (Development)
        uses: hoverkraft-tech/compose-action@v2.0.2
        with:
          compose-file: "./docker-compose.yml"
          up-flags: "--build -d"  # Build images and run in detached mode
          services: "app"         # Specify services to run, e.g., "app"

      - name: Run tests inside containers
        run: |
          docker-compose exec app pytest  # Run tests in the "app" service container

      - name: Clean up Docker Compose services
        uses: hoverkraft-tech/compose-action@v2.0.2
        with:
          compose-file: "./docker-compose.yml"
          down-flags: "--volumes --remove-orphans"  # Remove volumes and orphaned services

  production:
    runs-on: ubuntu-latest
    environment: production
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Install docker-compose
        run: |
          curl -L "https://github.com/docker/compose/releases/download/$(curl -s https://api.github.com/repos/docker/compose/releases/latest | jq -r .tag_name)/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          docker-compose --version  # Verifica la instalación

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Set up Google Cloud credentials
        run: echo "${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}" > /tmp/service-account.json
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}

      - name: Build and start Docker containers for production
        run: |
          docker-compose -f docker-compose.yml -p production up --build -d

      - name: Run Terraform apply for production
        run: |
          cd terraform
          terraform init
          terraform apply -auto-approve -var="project_id=${{ secrets.GCP_PROJECT_ID }}"

      - name: Run docker-compose (Production)
        uses: hoverkraft-tech/compose-action@v2.0.2
        with:
          compose-file: "./docker-compose.yml"
          up-flags: "--build -d"
          services: "app"  # Specify the services to run in production

      - name: Run tests inside containers
        run: |
          docker-compose exec app pytest  # Run tests in the "app" service container

      - name: Clean up Docker Compose services
        uses: hoverkraft-tech/compose-action@v2.0.2
        with:
          compose-file: "./docker-compose.yml"
          down-flags: "--volumes --remove-orphans"  # Remove volumes and orphaned services
